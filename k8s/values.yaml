global:
  sharedConfig:
    enabled: true
    labels:
      config-type: shared
      env: production

  sharedSecrets:
    enabled: true
    labels:
      secret-type: shared
      env: production

  jwt:
    secret: "YmFzZTY0ZW5jb2RlZGtleWZvckhzNTExMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MA=="

ingress-nginx:
  controller:
    config:
      allow-snippet-annotations: "true"

front-ui-service:
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080

  userIngress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /front/account/$1
    hosts:
      - host: my-bank-app.local
        paths:
          # Правило: /user/любой_путь → /front/account/любой_путь
          - path: /user/(.*)
            pathType: ImplementationSpecific

  rootIngress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /front/$1
    hosts:
      - host: my-bank-app.local
        paths:
          # Правило: любой другой путь /* → /front/тот_же_путь
          - path: /(.*)
            pathType: ImplementationSpecific

account-service:
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: my-bank-app.local
        paths:
          # Правило: /account/любой_путь → /front/account/любой_путь
          - path: /account
            pathType: Prefix

exchange-service:
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: my-bank-app.local
        paths:
          # Правило: /exchange/любой_путь → /exchange/любой_путь
          - path: /exchange
            pathType: Prefix

account-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "16.6.0-debian-12-r2"
  auth:
    username: "postgres"
    password: "postgres"
    database: "account_db"
    
block-token-list-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/redis
    tag: "8.2.1-debian-12-r0"
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
  service:
    port: 6379
    
suspicious-operation-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "16.6.0-debian-12-r2"
  auth: 
    database: suspicious_operation_db
    username: postgres
    password: "postgres"
    
operation-count-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/redis
    tag: "8.2.1-debian-12-r0"
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
  service:
    port: 6379
    
cash-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "16.6.0-debian-12-r2"
  auth: 
    database: cash_db
    username: postgres
    password: "postgres"

transfer-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "16.6.0-debian-12-r2"
  auth: 
    database: transfer_db
    username: postgres
    password: "postgres"
   
exchange-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "16.6.0-debian-12-r2"
  auth: 
    database: exchange_db
    username: postgres
    password: "postgres"

notification-db:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/postgresql
    tag: "16.6.0-debian-12-r2"
  auth: 
    database: notification_db
    username: postgres
    password: "postgres"

keycloak:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/keycloak
    tag: "26.3.3-debian-12-r0"
  auth:
    adminUser: admin
    adminPassword: admin
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  postgresql:
    enabled: false
  production: false
  persistence:
    enabled: false
  externalDatabase:
    host: "localhost"
    port: 5432
    user: "keycloak"
    password: "keycloak"
    database: "keycloak"
  extraEnvVars:
    - name: KC_DB
      value: "dev-file"
    - name: DB_VENDOR
      value: "h2"
    - name: JAVA_OPTS_APPEND
      value: "-Dkeycloak.profile=preview -Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.migration.action=import -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/opt/bitnami/keycloak/data/import -Dkeycloak.migration.strategy=OVERWRITE_EXISTING"
  extraVolumes:
    - name: realm-config
      configMap:
        name: realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
  command:
    - "/opt/bitnami/keycloak/bin/kc.sh"
    - "start-dev"
    - "--http-enabled=true"
    - "--hostname-strict=false"
    - "--import-realm"
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  startupProbe:
    enabled: false
  resources:
    limits:
      memory: 1Gi
      cpu: 500m
    requests:
      memory: 512Mi
      cpu: 200m

kafka:
  enabled: true
  image:
    registry: docker.io
    repository: bitnamilegacy/kafka
    tag: "4.0.0-debian-12-r10"
  replicaCount: 2
  topics:
    - name: rates-topic
      partitions: 1
      replicas: 2
  listeners:
    client:
      port: 9092
      protocol: PLAINTEXT
    controller:
      port: 9093
      protocol: SASL_PLAINTEXT

  interBrokerListenerName: client
  controllerListenerName: controller

  externalAccess:
    enabled: false

zipkin:
  replicaCount: 1
  service:
    type: ClusterIP
    port: 9411

prometheus:
  server:
    service:
      type: ClusterIP
      servicePort: 9090

  extraScrapeConfigs: |
    - job_name: 'account-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-account-service:8080']
          labels:
            application: 'account-service'
    - job_name: 'blocker-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-blocker-service:8080']
          labels:
            application: 'blocker-service'
    - job_name: 'cash-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-cash-service:8080']
          labels:
            application: 'cash-service'
    - job_name: 'transfer-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-transfer-service:8080']
          labels:
            application: 'transfer-service'    
    - job_name: 'front-ui-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-front-ui-service:8080']
          labels:
            application: 'front-ui-service'
    - job_name: 'exchange-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-exchange-service:8080']
          labels:
            application: 'exchange-service'
    - job_name: 'exchange-generator-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-exchange-generator-service:8080']
          labels:
            application: 'exchange-generator-service'
    - job_name: 'notification-service'
      metrics_path: '/actuator/prometheus'
      scrape_interval: 15s
      static_configs:
        - targets: ['{{ .Release.Name }}-notification-service:8080']
          labels:
            application: 'notification-service'

  serverFiles:
    alerting_rules.yml:
      groups:
        - name: http_errors
          rules:
            - alert: HighHttp5xxErrorRate
              expr: >
                sum(rate(http_server_requests_seconds_count{status=~"5.."}[1m])) 
                / 
                sum(rate(http_server_requests_seconds_count[1m])) 
                > 0.1
              for: 2m
              labels:
                severity: warning
              annotations:
                summary: "Высокий процент 5xx ошибок"

        - name: login_failures
          rules:
            - alert: HighLoginFailureRate
              expr: |
                sum by (login) (increase(custom_login_failure_total[5m])) > 5
              for: 1m
              labels:
                severity: critical
              annotations:
                summary: "Слишком много неудачных логинов"
                description: "Пользователь {{ $labels.login }} совершил более 5 неудачных логинов за 5 минут"

        - name: fraud_detection
          rules:
            - alert: SuspiciousTransferBlocked
              expr: |
                increase(custom_transfer_blocked_total[1m]) > 0
              for: 0m
              labels:
                severity: warning
              annotations:
                summary: "Заблокирован подозрительный перевод"
                description: "Обнаружена подозрительная операция. Пользователь: {{ $labels.login }}"

        - name: currency_rates
          rules:
            - alert: CurrencyRateNotUpdated
              expr: |
                increase(currency_rates_updated_total[10m]) == 0
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: "Не обновлялся курс валют"
                description: "Курс валют не обновлялся последние 10 минут"

grafana:
  enabled: true

  replicaCount: 1

  service:
    type: ClusterIP
    port: 3000

  adminUser: admin
  adminPassword: admin

  ingress:
    enabled: false

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: 'http://{{ .Release.Name }}-prometheus-server:9090'
          isDefault: true

  extraVolumeMounts:
    - name: custom-dashboards
      mountPath: /var/lib/grafana/dashboards/custom
      readOnly: false

  extraVolumes:
    - name: custom-dashboards
      configMap:
        name: grafana-dashboards

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        # Провайдер для dashboards из gnetId
        - name: default
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
        # Провайдер для собственных dashboards
        - name: custom
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/custom

  # Dashboards из Grafana.com
  dashboards:
    default:
      spring-boot:
        gnetId: 10280
        revision: 1
        datasource: Prometheus
      jvm-overview:
        gnetId: 4701
        revision: 2
        datasource: Prometheus

  persistence:
    enabled: true
    size: 1Gi